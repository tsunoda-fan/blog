"use strict";

var _powerAssert = _interopRequireDefault(require("power-assert"));

var _path = _interopRequireDefault(require("path"));

var _rewire = _interopRequireDefault(require("rewire"));

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @test {CLI} */
describe('CLI', () => {
  const Module = (0, _rewire.default)('./cli.js');
  /** @test {CLI#parseArgv} */

  describe('parseArgv', () => {
    const parseArgv = Module.__get__('parseArgv');

    const Options = Module.__get__('Options');

    it('input', () => {
      var _rec = new _powerAssertRecorder(),
          _rec2 = new _powerAssertRecorder(),
          _rec3 = new _powerAssertRecorder(),
          _rec4 = new _powerAssertRecorder();

      const input = './examples/wp.xml';

      const expected = _path.default.resolve(input);

      let options = parseArgv([Options.input.name, input]);
      (0, _powerAssert.default)(_rec._expr(_rec._capt(_rec._capt(_rec._capt(options, "arguments/0/left/object").input, "arguments/0/left") === _rec._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.input === expected)",
        filepath: "src/bin/cli.test.js",
        line: 18,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"input\",\"range\":[15,20]},\"computed\":false,\"range\":[7,20]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[25,33]},\"range\":[7,33]}],\"range\":[0,34]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"input\",\"range\":[15,20]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[21,24]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[25,33]},{\"type\":{\"label\":\")\"},\"range\":[33,34]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      options = parseArgv([Options.input.shortName, input]);
      (0, _powerAssert.default)(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(options, "arguments/0/left/object").input, "arguments/0/left") === _rec2._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.input === expected)",
        filepath: "src/bin/cli.test.js",
        line: 21,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"input\",\"range\":[15,20]},\"computed\":false,\"range\":[7,20]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[25,33]},\"range\":[7,33]}],\"range\":[0,34]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"input\",\"range\":[15,20]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[21,24]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[25,33]},{\"type\":{\"label\":\")\"},\"range\":[33,34]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      options = parseArgv([Options.input.name]);
      (0, _powerAssert.default)(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(options, "arguments/0/left/object").input, "arguments/0/left") !== _rec3._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.input !== expected)",
        filepath: "src/bin/cli.test.js",
        line: 24,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"input\",\"range\":[15,20]},\"computed\":false,\"range\":[7,20]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[25,33]},\"range\":[7,33]}],\"range\":[0,34]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"input\",\"range\":[15,20]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"!==\",\"range\":[21,24]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[25,33]},{\"type\":{\"label\":\")\"},\"range\":[33,34]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      options = parseArgv([Options.input.shortName, Options.help.name]);
      (0, _powerAssert.default)(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(options, "arguments/0/left/object").input, "arguments/0/left") !== _rec4._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.input !== expected)",
        filepath: "src/bin/cli.test.js",
        line: 27,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"input\",\"range\":[15,20]},\"computed\":false,\"range\":[7,20]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[25,33]},\"range\":[7,33]}],\"range\":[0,34]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"input\",\"range\":[15,20]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"!==\",\"range\":[21,24]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[25,33]},{\"type\":{\"label\":\")\"},\"range\":[33,34]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('output', () => {
      var _rec5 = new _powerAssertRecorder(),
          _rec6 = new _powerAssertRecorder(),
          _rec7 = new _powerAssertRecorder(),
          _rec8 = new _powerAssertRecorder();

      const output = './examples';

      const expected = _path.default.resolve(output);

      let options = parseArgv([Options.output.name, output]);
      (0, _powerAssert.default)(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(options, "arguments/0/left/object").output, "arguments/0/left") === _rec5._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.output === expected)",
        filepath: "src/bin/cli.test.js",
        line: 34,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"output\",\"range\":[15,21]},\"computed\":false,\"range\":[7,21]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[26,34]},\"range\":[7,34]}],\"range\":[0,35]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"output\",\"range\":[15,21]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[22,25]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[26,34]},{\"type\":{\"label\":\")\"},\"range\":[34,35]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      options = parseArgv([Options.output.shortName, output]);
      (0, _powerAssert.default)(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(options, "arguments/0/left/object").output, "arguments/0/left") === _rec6._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.output === expected)",
        filepath: "src/bin/cli.test.js",
        line: 37,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"output\",\"range\":[15,21]},\"computed\":false,\"range\":[7,21]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[26,34]},\"range\":[7,34]}],\"range\":[0,35]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"output\",\"range\":[15,21]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[22,25]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[26,34]},{\"type\":{\"label\":\")\"},\"range\":[34,35]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      options = parseArgv([Options.output.name]);
      (0, _powerAssert.default)(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(options, "arguments/0/left/object").output, "arguments/0/left") !== _rec7._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.output !== expected)",
        filepath: "src/bin/cli.test.js",
        line: 40,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"output\",\"range\":[15,21]},\"computed\":false,\"range\":[7,21]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[26,34]},\"range\":[7,34]}],\"range\":[0,35]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"output\",\"range\":[15,21]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"!==\",\"range\":[22,25]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[26,34]},{\"type\":{\"label\":\")\"},\"range\":[34,35]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      options = parseArgv([Options.output.shortName, Options.help.name]);
      (0, _powerAssert.default)(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(options, "arguments/0/left/object").output, "arguments/0/left") !== _rec8._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(options.output !== expected)",
        filepath: "src/bin/cli.test.js",
        line: 43,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"!==\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"output\",\"range\":[15,21]},\"computed\":false,\"range\":[7,21]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[26,34]},\"range\":[7,34]}],\"range\":[0,35]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"output\",\"range\":[15,21]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"!==\",\"range\":[22,25]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[26,34]},{\"type\":{\"label\":\")\"},\"range\":[34,35]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('report', () => {
      var _rec9 = new _powerAssertRecorder(),
          _rec10 = new _powerAssertRecorder();

      let options = parseArgv([Options.report.name]);
      (0, _powerAssert.default)(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(options, "arguments/0/left/object").report, "arguments/0/left") === true, "arguments/0"), {
        content: "assert(options.report === true)",
        filepath: "src/bin/cli.test.js",
        line: 48,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"report\",\"range\":[15,21]},\"computed\":false,\"range\":[7,21]},\"right\":{\"type\":\"BooleanLiteral\",\"value\":true,\"range\":[26,30]},\"range\":[7,30]}],\"range\":[0,31]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"report\",\"range\":[15,21]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[22,25]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[26,30]},{\"type\":{\"label\":\")\"},\"range\":[30,31]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      options = parseArgv([Options.report.shortName]);
      (0, _powerAssert.default)(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(options, "arguments/0/left/object").report, "arguments/0/left") === true, "arguments/0"), {
        content: "assert(options.report === true)",
        filepath: "src/bin/cli.test.js",
        line: 51,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"report\",\"range\":[15,21]},\"computed\":false,\"range\":[7,21]},\"right\":{\"type\":\"BooleanLiteral\",\"value\":true,\"range\":[26,30]},\"range\":[7,30]}],\"range\":[0,31]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"report\",\"range\":[15,21]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[22,25]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[26,30]},{\"type\":{\"label\":\")\"},\"range\":[30,31]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('noGFM', () => {
      var _rec11 = new _powerAssertRecorder();

      const options = parseArgv([Options.noGFM.name]);
      (0, _powerAssert.default)(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(options, "arguments/0/left/object").noGFM, "arguments/0/left") === true, "arguments/0"), {
        content: "assert(options.noGFM === true)",
        filepath: "src/bin/cli.test.js",
        line: 56,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"noGFM\",\"range\":[15,20]},\"computed\":false,\"range\":[7,20]},\"right\":{\"type\":\"BooleanLiteral\",\"value\":true,\"range\":[25,29]},\"range\":[7,29]}],\"range\":[0,30]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"noGFM\",\"range\":[15,20]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[21,24]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[25,29]},{\"type\":{\"label\":\")\"},\"range\":[29,30]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('noMELink', () => {
      var _rec12 = new _powerAssertRecorder();

      const options = parseArgv([Options.noMELink.name]);
      (0, _powerAssert.default)(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(options, "arguments/0/left/object").noMELink, "arguments/0/left") === true, "arguments/0"), {
        content: "assert(options.noMELink === true)",
        filepath: "src/bin/cli.test.js",
        line: 61,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"noMELink\",\"range\":[15,23]},\"computed\":false,\"range\":[7,23]},\"right\":{\"type\":\"BooleanLiteral\",\"value\":true,\"range\":[28,32]},\"range\":[7,32]}],\"range\":[0,33]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"noMELink\",\"range\":[15,23]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[24,27]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[28,32]},{\"type\":{\"label\":\")\"},\"range\":[32,33]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('withMetadata', () => {
      var _rec13 = new _powerAssertRecorder();

      const options = parseArgv([Options.withMetadata.name]);
      (0, _powerAssert.default)(_rec13._expr(_rec13._capt(_rec13._capt(_rec13._capt(options, "arguments/0/left/object").withMetadata, "arguments/0/left") === true, "arguments/0"), {
        content: "assert(options.withMetadata === true)",
        filepath: "src/bin/cli.test.js",
        line: 66,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"withMetadata\",\"range\":[15,27]},\"computed\":false,\"range\":[7,27]},\"right\":{\"type\":\"BooleanLiteral\",\"value\":true,\"range\":[32,36]},\"range\":[7,36]}],\"range\":[0,37]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"withMetadata\",\"range\":[15,27]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[28,31]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[32,36]},{\"type\":{\"label\":\")\"},\"range\":[36,37]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('withImageDownload', () => {
      var _rec14 = new _powerAssertRecorder();

      const options = parseArgv([Options.withImageDownload.name]);
      (0, _powerAssert.default)(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(options, "arguments/0/left/object").withImageDownload, "arguments/0/left") === true, "arguments/0"), {
        content: "assert(options.withImageDownload === true)",
        filepath: "src/bin/cli.test.js",
        line: 71,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"withImageDownload\",\"range\":[15,32]},\"computed\":false,\"range\":[7,32]},\"right\":{\"type\":\"BooleanLiteral\",\"value\":true,\"range\":[37,41]},\"range\":[7,41]}],\"range\":[0,42]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"withImageDownload\",\"range\":[15,32]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[33,36]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[37,41]},{\"type\":{\"label\":\")\"},\"range\":[41,42]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('withComment', () => {
      var _rec15 = new _powerAssertRecorder();

      const options = parseArgv([Options.withComment.name]);
      (0, _powerAssert.default)(_rec15._expr(_rec15._capt(_rec15._capt(_rec15._capt(options, "arguments/0/left/object").withComment, "arguments/0/left") === true, "arguments/0"), {
        content: "assert(options.withComment === true)",
        filepath: "src/bin/cli.test.js",
        line: 76,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"withComment\",\"range\":[15,26]},\"computed\":false,\"range\":[7,26]},\"right\":{\"type\":\"BooleanLiteral\",\"value\":true,\"range\":[31,35]},\"range\":[7,35]}],\"range\":[0,36]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"withComment\",\"range\":[15,26]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[27,30]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[31,35]},{\"type\":{\"label\":\")\"},\"range\":[35,36]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('replaceLinkPrefix', () => {
      var _rec16 = new _powerAssertRecorder(),
          _rec17 = new _powerAssertRecorder();

      const options = parseArgv([Options.replaceLinkPrefix.name, 'http://example.com/=/']);
      (0, _powerAssert.default)(_rec16._expr(_rec16._capt(_rec16._capt(_rec16._capt(_rec16._capt(options, "arguments/0/left/object/object").replaceLinkPrefix, "arguments/0/left/object").old, "arguments/0/left") === 'http://example.com/', "arguments/0"), {
        content: "assert(options.replaceLinkPrefix.old === 'http://example.com/')",
        filepath: "src/bin/cli.test.js",
        line: 81,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"replaceLinkPrefix\",\"range\":[15,32]},\"computed\":false,\"range\":[7,32]},\"property\":{\"type\":\"Identifier\",\"name\":\"old\",\"range\":[33,36]},\"computed\":false,\"range\":[7,36]},\"right\":{\"type\":\"StringLiteral\",\"value\":\"http://example.com/\",\"range\":[41,62]},\"range\":[7,62]}],\"range\":[0,63]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"replaceLinkPrefix\",\"range\":[15,32]},{\"type\":{\"label\":\".\"},\"range\":[32,33]},{\"type\":{\"label\":\"name\"},\"value\":\"old\",\"range\":[33,36]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[37,40]},{\"type\":{\"label\":\"string\"},\"value\":\"http://example.com/\",\"range\":[41,62]},{\"type\":{\"label\":\")\"},\"range\":[62,63]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec17._expr(_rec17._capt(_rec17._capt(_rec17._capt(_rec17._capt(options, "arguments/0/left/object/object").replaceLinkPrefix, "arguments/0/left/object").new, "arguments/0/left") === '/', "arguments/0"), {
        content: "assert(options.replaceLinkPrefix.new === '/')",
        filepath: "src/bin/cli.test.js",
        line: 82,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"options\",\"range\":[7,14]},\"property\":{\"type\":\"Identifier\",\"name\":\"replaceLinkPrefix\",\"range\":[15,32]},\"computed\":false,\"range\":[7,32]},\"property\":{\"type\":\"Identifier\",\"name\":\"new\",\"range\":[33,36]},\"computed\":false,\"range\":[7,36]},\"right\":{\"type\":\"StringLiteral\",\"value\":\"/\",\"range\":[41,44]},\"range\":[7,44]}],\"range\":[0,45]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"options\",\"range\":[7,14]},{\"type\":{\"label\":\".\"},\"range\":[14,15]},{\"type\":{\"label\":\"name\"},\"value\":\"replaceLinkPrefix\",\"range\":[15,32]},{\"type\":{\"label\":\".\"},\"range\":[32,33]},{\"type\":{\"label\":\"new\"},\"value\":\"new\",\"range\":[33,36]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[37,40]},{\"type\":{\"label\":\"string\"},\"value\":\"/\",\"range\":[41,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
});