"use strict";

var _powerAssert = _interopRequireDefault(require("power-assert"));

var _path = _interopRequireDefault(require("path"));

var _util = _interopRequireDefault(require("./util.js"));

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @test {Util} */
describe('Util', () => {
  describe('escapeRegExp', () => {
    it('Escape', () => {
      var _rec = new _powerAssertRecorder();

      const actual = _util.default.escapeRegExp('https://example.com/test.jpeg');

      const expected = 'https://example\\.com/test\\.jpeg';
      (0, _powerAssert.default)(_rec._expr(_rec._capt(_rec._capt(actual, "arguments/0/left") === _rec._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/util.test.js",
        line: 11,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
  /** @test {Util#existsSync} */

  describe('existsSync', () => {
    it('Exists', () => {
      var _rec2 = new _powerAssertRecorder();

      (0, _powerAssert.default)(_rec2._expr(_rec2._capt(_rec2._capt(_util.default, "arguments/0/callee/object").existsSync('./examples'), "arguments/0"), {
        content: "assert(Util.existsSync('./examples'))",
        filepath: "src/lib/util.test.js",
        line: 18,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"Util\",\"range\":[7,11]},\"property\":{\"type\":\"Identifier\",\"name\":\"existsSync\",\"range\":[12,22]},\"computed\":false,\"range\":[7,22]},\"arguments\":[{\"type\":\"StringLiteral\",\"value\":\"./examples\",\"range\":[23,35]}],\"range\":[7,36]}],\"range\":[0,37]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"Util\",\"range\":[7,11]},{\"type\":{\"label\":\".\"},\"range\":[11,12]},{\"type\":{\"label\":\"name\"},\"value\":\"existsSync\",\"range\":[12,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"string\"},\"value\":\"./examples\",\"range\":[23,35]},{\"type\":{\"label\":\")\"},\"range\":[35,36]},{\"type\":{\"label\":\")\"},\"range\":[36,37]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('Not exists', () => {
      var _rec3 = new _powerAssertRecorder();

      (0, _powerAssert.default)(_rec3._expr(_rec3._capt(!_rec3._capt(_rec3._capt(_util.default, "arguments/0/argument/callee/object").existsSync('./XXX'), "arguments/0/argument"), "arguments/0"), {
        content: "assert(!Util.existsSync('./XXX'))",
        filepath: "src/lib/util.test.js",
        line: 22,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"UnaryExpression\",\"operator\":\"!\",\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"Util\",\"range\":[8,12]},\"property\":{\"type\":\"Identifier\",\"name\":\"existsSync\",\"range\":[13,23]},\"computed\":false,\"range\":[8,23]},\"arguments\":[{\"type\":\"StringLiteral\",\"value\":\"./XXX\",\"range\":[24,31]}],\"range\":[8,32]},\"prefix\":true,\"range\":[7,32]}],\"range\":[0,33]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"!\"},\"value\":\"!\",\"range\":[7,8]},{\"type\":{\"label\":\"name\"},\"value\":\"Util\",\"range\":[8,12]},{\"type\":{\"label\":\".\"},\"range\":[12,13]},{\"type\":{\"label\":\"name\"},\"value\":\"existsSync\",\"range\":[13,23]},{\"type\":{\"label\":\"(\"},\"range\":[23,24]},{\"type\":{\"label\":\"string\"},\"value\":\"./XXX\",\"range\":[24,31]},{\"type\":{\"label\":\")\"},\"range\":[31,32]},{\"type\":{\"label\":\")\"},\"range\":[32,33]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
  /** @test {Util#formatDate} */

  describe('formatDate', () => {
    it('Default YYYY-MM-DD hh:mm:ss.SSS', () => {
      var _rec4 = new _powerAssertRecorder();

      const date = new Date(2015, 7, 4, 21, 17, 45, 512);

      const text = _util.default.formatDate(date);

      (0, _powerAssert.default)(_rec4._expr(_rec4._capt(_rec4._capt(text, "arguments/0/left") === '2015-08-04 21:17:45.512', "arguments/0"), {
        content: "assert(text === '2015-08-04 21:17:45.512')",
        filepath: "src/lib/util.test.js",
        line: 31,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"text\",\"range\":[7,11]},\"right\":{\"type\":\"StringLiteral\",\"value\":\"2015-08-04 21:17:45.512\",\"range\":[16,41]},\"range\":[7,41]}],\"range\":[0,42]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"text\",\"range\":[7,11]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[12,15]},{\"type\":{\"label\":\"string\"},\"value\":\"2015-08-04 21:17:45.512\",\"range\":[16,41]},{\"type\":{\"label\":\")\"},\"range\":[41,42]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('Hyphen YYYY-MM-DD-hh-mm-ss', () => {
      var _rec5 = new _powerAssertRecorder();

      const date = new Date(2015, 7, 4, 21, 17, 45, 512);

      const text = _util.default.formatDate(date, 'YYYY-MM-DD-hh-mm-ss');

      (0, _powerAssert.default)(_rec5._expr(_rec5._capt(_rec5._capt(text, "arguments/0/left") === '2015-08-04-21-17-45', "arguments/0"), {
        content: "assert(text === '2015-08-04-21-17-45')",
        filepath: "src/lib/util.test.js",
        line: 37,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"text\",\"range\":[7,11]},\"right\":{\"type\":\"StringLiteral\",\"value\":\"2015-08-04-21-17-45\",\"range\":[16,37]},\"range\":[7,37]}],\"range\":[0,38]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"text\",\"range\":[7,11]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[12,15]},{\"type\":{\"label\":\"string\"},\"value\":\"2015-08-04-21-17-45\",\"range\":[16,37]},{\"type\":{\"label\":\")\"},\"range\":[37,38]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('No zero-padding YYYY/M/D h:m:s', () => {
      var _rec6 = new _powerAssertRecorder();

      const date = new Date(2015, 7, 4, 21, 17, 45, 512);

      const text = _util.default.formatDate(date, 'YYYY/M/D h:m:s');

      (0, _powerAssert.default)(_rec6._expr(_rec6._capt(_rec6._capt(text, "arguments/0/left") === '2015/8/4 21:17:45', "arguments/0"), {
        content: "assert(text === '2015/8/4 21:17:45')",
        filepath: "src/lib/util.test.js",
        line: 43,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"text\",\"range\":[7,11]},\"right\":{\"type\":\"StringLiteral\",\"value\":\"2015/8/4 21:17:45\",\"range\":[16,35]},\"range\":[7,35]}],\"range\":[0,36]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"text\",\"range\":[7,11]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[12,15]},{\"type\":{\"label\":\"string\"},\"value\":\"2015/8/4 21:17:45\",\"range\":[16,35]},{\"type\":{\"label\":\")\"},\"range\":[35,36]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('NaN', () => {
      var _rec7 = new _powerAssertRecorder();

      const date = new Date('Wed, 30 Nov -0001 00:00:00 +0000');

      const text = _util.default.formatDate(date, 'YYYY/M/D h:m:s');

      (0, _powerAssert.default)(_rec7._expr(_rec7._capt(_rec7._capt(text, "arguments/0/left") === null, "arguments/0"), {
        content: "assert(text === null)",
        filepath: "src/lib/util.test.js",
        line: 49,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"text\",\"range\":[7,11]},\"right\":{\"type\":\"NullLiteral\",\"range\":[16,20]},\"range\":[7,20]}],\"range\":[0,21]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"text\",\"range\":[7,11]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[12,15]},{\"type\":{\"label\":\"null\"},\"value\":\"null\",\"range\":[16,20]},{\"type\":{\"label\":\")\"},\"range\":[20,21]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
  /** @test {Util#uniquePathWithSequentialNumber} */

  describe('uniquePathWithSequentialNumber', () => {
    it('Unique path: directory', () => {
      var _rec8 = new _powerAssertRecorder();

      const actual = _util.default.uniquePathWithSequentialNumber('./examples');

      const expect = _path.default.resolve('./examples-1');

      (0, _powerAssert.default)(_rec8._expr(_rec8._capt(_rec8._capt(actual, "arguments/0/left") === _rec8._capt(expect, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expect)",
        filepath: "src/lib/util.test.js",
        line: 58,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expect\",\"range\":[18,24]},\"range\":[7,24]}],\"range\":[0,25]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expect\",\"range\":[18,24]},{\"type\":{\"label\":\")\"},\"range\":[24,25]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('Unique path: file', () => {
      var _rec9 = new _powerAssertRecorder();

      const actual = _util.default.uniquePathWithSequentialNumber('./src/lib/index.js');

      const expect = _path.default.resolve('./src/lib/index-1.js');

      (0, _powerAssert.default)(_rec9._expr(_rec9._capt(_rec9._capt(actual, "arguments/0/left") === _rec9._capt(expect, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expect)",
        filepath: "src/lib/util.test.js",
        line: 64,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expect\",\"range\":[18,24]},\"range\":[7,24]}],\"range\":[0,25]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expect\",\"range\":[18,24]},{\"type\":{\"label\":\")\"},\"range\":[24,25]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('Original path (not exists)', () => {
      var _rec10 = new _powerAssertRecorder();

      const actual = _util.default.uniquePathWithSequentialNumber('./XXX.md');

      const expect = _path.default.resolve('./XXX.md');

      (0, _powerAssert.default)(_rec10._expr(_rec10._capt(_rec10._capt(actual, "arguments/0/left") === _rec10._capt(expect, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expect)",
        filepath: "src/lib/util.test.js",
        line: 70,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expect\",\"range\":[18,24]},\"range\":[7,24]}],\"range\":[0,25]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expect\",\"range\":[18,24]},{\"type\":{\"label\":\")\"},\"range\":[24,25]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
});