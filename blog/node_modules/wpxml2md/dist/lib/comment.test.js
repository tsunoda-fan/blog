"use strict";

var _powerAssert = _interopRequireDefault(require("power-assert"));

var _rewire = _interopRequireDefault(require("rewire"));

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Comment', () => {
  const Module = (0, _rewire.default)('./comment.js');
  describe('convertBody', () => {
    const convertBody = Module.__get__('convertBody');

    it('Normal', () => {
      var _rec = new _powerAssertRecorder();

      const actual = convertBody(`aaa\nbbb`);
      const expected = '  > aaa\n  > bbb';
      (0, _powerAssert.default)(_rec._expr(_rec._capt(_rec._capt(actual, "arguments/0/left") === _rec._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/comment.test.js",
        line: 12,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
  describe('convertMarkdown', () => {
    const convertMarkdown = Module.__get__('convertMarkdown');

    it('Tree', () => {
      var _rec2 = new _powerAssertRecorder();

      const comments = [{
        author: 'akabeko',
        date: {
          year: '2017',
          month: '12',
          day: '28',
          time: '09:42:28'
        },
        url: 'http://akabeko.me/',
        mail: `sample@example.com`,
        content: 'aaaaa\naaaaa',
        children: [{
          author: 'anonymous',
          date: {
            year: '2017',
            month: '12',
            day: '28',
            time: '09:45:12'
          },
          mail: `sample2@example.com`,
          content: 'bbbbb',
          children: [{
            author: 'anonymous',
            date: {
              year: '2017',
              month: '12',
              day: '29',
              time: '17:01:47'
            },
            content: 'ccccc\nccccc'
          }]
        }]
      }, {
        author: 'anonymous',
        date: {
          year: '2017',
          month: '12',
          day: '29',
          time: '18:17:33'
        },
        content: 'zzzzzz'
      }];
      const actual = convertMarkdown(comments);
      const expected = `* ![akabeko](https://www.gravatar.com/avatar/45e67126a4c44c6ae030279e21437c79?d=identicon) **[akabeko](http://akabeko.me/)** 2017-12-28T09:42:28Z
  > aaaaa
  > aaaaa
* ![anonymous](https://www.gravatar.com/avatar/cc7cd2a9c587aafc83517c97ab675864?d=identicon) **anonymous** 2017-12-28T09:45:12Z
  > bbbbb
* **anonymous** 2017-12-29T17:01:47Z
  > ccccc
  > ccccc
* **anonymous** 2017-12-29T18:17:33Z
  > zzzzzz
`;
      (0, _powerAssert.default)(_rec2._expr(_rec2._capt(_rec2._capt(actual, "arguments/0/left") === _rec2._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/comment.test.js",
        line: 64,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('Empty', () => {
      var _rec3 = new _powerAssertRecorder();

      const actual = convertMarkdown();
      const expected = '';
      (0, _powerAssert.default)(_rec3._expr(_rec3._capt(_rec3._capt(actual, "arguments/0/left") === _rec3._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/comment.test.js",
        line: 70,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
  describe('createCommentTree', () => {
    const createCommentTree = Module.__get__('createCommentTree');

    it('Create tree', () => {
      var _rec4 = new _powerAssertRecorder(),
          _rec5 = new _powerAssertRecorder();

      const comments = [{
        id: '1'
      }, {
        id: '2',
        parent: '1'
      }, {
        id: '3'
      }, {
        id: '4',
        parent: '2'
      }];
      const actual = createCommentTree(comments);
      const expected = [{
        id: '1',
        children: [{
          id: '2',
          parent: '1',
          children: [{
            id: '4',
            parent: '2'
          }]
        }]
      }, {
        id: '3'
      }];

      _powerAssert.default.deepStrictEqual(_rec4._expr(_rec4._capt(actual, "arguments/0"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/comment.test.js",
        line: 104,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }), _rec5._expr(_rec5._capt(expected, "arguments/1"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/comment.test.js",
        line: 104,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('Empty', () => {
      var _rec6 = new _powerAssertRecorder(),
          _rec7 = new _powerAssertRecorder();

      const actual = createCommentTree();
      const expected = [];

      _powerAssert.default.deepStrictEqual(_rec6._expr(_rec6._capt(actual, "arguments/0"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/comment.test.js",
        line: 110,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }), _rec7._expr(_rec7._capt(expected, "arguments/1"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/comment.test.js",
        line: 110,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
  describe('parse', () => {
    const parse = Module.__get__('parse');

    it('Single comment', () => {
      var _rec8 = new _powerAssertRecorder(),
          _rec9 = new _powerAssertRecorder();

      const comments = [{
        'wp:comment_id': ['66571'],
        'wp:comment_author': ['anonymous'],
        'wp:comment_author_email': ['anonymous@example.com'],
        'wp:comment_author_url': ['http://example.com/'],
        'wp:comment_author_IP': ['192.168.0.0'],
        'wp:comment_date': ['2017-12-28 13:59:53'],
        'wp:comment_date_gmt': ['2017-12-28 04:59:53'],
        'wp:comment_content': ['Message\nMessage\n\nMessage'],
        'wp:comment_approved': ['1'],
        'wp:comment_type': [],
        'wp:comment_parent': ['0'],
        'wp:comment_user_id': ['0']
      }];
      const actual = parse(comments);
      const expected = [{
        id: '66571',
        author: 'anonymous',
        mail: 'anonymous@example.com',
        url: 'http://example.com/',
        date: {
          year: '2017',
          month: '12',
          day: '28',
          time: '04:59:53'
        },
        content: 'Message\nMessage\n\nMessage',
        parent: '0'
      }];

      _powerAssert.default.deepStrictEqual(_rec8._expr(_rec8._capt(actual, "arguments/0"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/comment.test.js",
        line: 146,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }), _rec9._expr(_rec9._capt(expected, "arguments/1"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/comment.test.js",
        line: 146,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('Empty', () => {
      var _rec10 = new _powerAssertRecorder(),
          _rec11 = new _powerAssertRecorder();

      const actual = parse();
      const expected = [];

      _powerAssert.default.deepStrictEqual(_rec10._expr(_rec10._capt(actual, "arguments/0"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/comment.test.js",
        line: 152,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }), _rec11._expr(_rec11._capt(expected, "arguments/1"), {
        content: "assert.deepStrictEqual(actual, expected)",
        filepath: "src/lib/comment.test.js",
        line: 152,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"property\":{\"type\":\"Identifier\",\"name\":\"deepStrictEqual\",\"range\":[7,22]},\"computed\":false,\"range\":[0,22]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[23,29]},{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[31,39]}],\"range\":[0,40]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\".\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"deepStrictEqual\",\"range\":[7,22]},{\"type\":{\"label\":\"(\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[31,39]},{\"type\":{\"label\":\")\"},\"range\":[39,40]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
});