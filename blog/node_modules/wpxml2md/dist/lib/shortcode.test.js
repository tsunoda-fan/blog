"use strict";

var _powerAssert = _interopRequireDefault(require("power-assert"));

var _rewire = _interopRequireDefault(require("rewire"));

var _shortcode = _interopRequireDefault(require("./shortcode.js"));

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @test {ConvertShortCode} */
describe('ConvertShortCode', () => {
  const Module = (0, _rewire.default)('./shortcode.js');
  /** @test {ConvertShortCode} */

  describe('ConvertShortCode', () => {
    it('[code]', () => {
      var _rec = new _powerAssertRecorder();

      const text = '[code]\nCode\n[/code]';
      const actual = (0, _shortcode.default)(text);
      const expected = '\n\n```\nCode\n```\n\n';
      (0, _powerAssert.default)(_rec._expr(_rec._capt(_rec._capt(actual, "arguments/0/left") === _rec._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/shortcode.test.js",
        line: 15,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('[code lang="lang"]', () => {
      var _rec2 = new _powerAssertRecorder();

      const text = '[code lang="lang"]\nCode\n[/code]';
      const actual = (0, _shortcode.default)(text);
      const expected = '\n\n```lang\nCode\n```\n\n';
      (0, _powerAssert.default)(_rec2._expr(_rec2._capt(_rec2._capt(actual, "arguments/0/left") === _rec2._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/shortcode.test.js",
        line: 22,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('[lang]', () => {
      var _rec3 = new _powerAssertRecorder(),
          _rec4 = new _powerAssertRecorder();

      let text = '[plain]\nCode\n[/plain]';
      let actual = (0, _shortcode.default)(text);
      let expected = '\n\n```\nCode\n```\n\n';
      (0, _powerAssert.default)(_rec3._expr(_rec3._capt(_rec3._capt(actual, "arguments/0/left") === _rec3._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/shortcode.test.js",
        line: 29,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      text = '[text]\nCode\n[/text]';
      actual = (0, _shortcode.default)(text);
      (0, _powerAssert.default)(_rec4._expr(_rec4._capt(_rec4._capt(actual, "arguments/0/left") === _rec4._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/shortcode.test.js",
        line: 33,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));

      const SHCodes = Module.__get__('SHCodes');

      for (let i = 3, max = SHCodes.length; i < max; ++i) {
        var _rec5 = new _powerAssertRecorder();

        const code = SHCodes[i];
        text = '[' + code + ']Code[/' + code + ']';
        actual = (0, _shortcode.default)(text);
        expected = '\n\n```' + code + '\nCode\n```\n\n';
        (0, _powerAssert.default)(_rec5._expr(_rec5._capt(_rec5._capt(actual, "arguments/0/left") === _rec5._capt(expected, "arguments/0/right"), "arguments/0"), {
          content: "assert(actual === expected)",
          filepath: "src/lib/shortcode.test.js",
          line: 41,
          ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
          tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
          visitorKeys: _powerAssertVisitorKeys
        }));
      }
    });
  });
  /** @test {parse} */

  describe('parse', () => {
    const parse = Module.__get__('parse');

    it('parse', () => {
      var _rec6 = new _powerAssertRecorder(),
          _rec7 = new _powerAssertRecorder(),
          _rec8 = new _powerAssertRecorder(),
          _rec9 = new _powerAssertRecorder(),
          _rec10 = new _powerAssertRecorder();

      const text = 'caption id="ID" align="alignright" width="300" caption="Caption"';
      const actual = parse(text);
      (0, _powerAssert.default)(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(actual, "arguments/0/left/object").code, "arguments/0/left") === 'caption', "arguments/0"), {
        content: "assert(actual.code === 'caption')",
        filepath: "src/lib/shortcode.test.js",
        line: 53,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"property\":{\"type\":\"Identifier\",\"name\":\"code\",\"range\":[14,18]},\"computed\":false,\"range\":[7,18]},\"right\":{\"type\":\"StringLiteral\",\"value\":\"caption\",\"range\":[23,32]},\"range\":[7,32]}],\"range\":[0,33]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\".\"},\"range\":[13,14]},{\"type\":{\"label\":\"name\"},\"value\":\"code\",\"range\":[14,18]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[19,22]},{\"type\":{\"label\":\"string\"},\"value\":\"caption\",\"range\":[23,32]},{\"type\":{\"label\":\")\"},\"range\":[32,33]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(_rec7._capt(actual, "arguments/0/left/object/object").params, "arguments/0/left/object").id, "arguments/0/left") === 'ID', "arguments/0"), {
        content: "assert(actual.params.id === 'ID')",
        filepath: "src/lib/shortcode.test.js",
        line: 54,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"property\":{\"type\":\"Identifier\",\"name\":\"params\",\"range\":[14,20]},\"computed\":false,\"range\":[7,20]},\"property\":{\"type\":\"Identifier\",\"name\":\"id\",\"range\":[21,23]},\"computed\":false,\"range\":[7,23]},\"right\":{\"type\":\"StringLiteral\",\"value\":\"ID\",\"range\":[28,32]},\"range\":[7,32]}],\"range\":[0,33]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\".\"},\"range\":[13,14]},{\"type\":{\"label\":\"name\"},\"value\":\"params\",\"range\":[14,20]},{\"type\":{\"label\":\".\"},\"range\":[20,21]},{\"type\":{\"label\":\"name\"},\"value\":\"id\",\"range\":[21,23]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[24,27]},{\"type\":{\"label\":\"string\"},\"value\":\"ID\",\"range\":[28,32]},{\"type\":{\"label\":\")\"},\"range\":[32,33]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(_rec8._capt(actual, "arguments/0/left/object/object").params, "arguments/0/left/object").align, "arguments/0/left") === 'alignright', "arguments/0"), {
        content: "assert(actual.params.align === 'alignright')",
        filepath: "src/lib/shortcode.test.js",
        line: 55,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"property\":{\"type\":\"Identifier\",\"name\":\"params\",\"range\":[14,20]},\"computed\":false,\"range\":[7,20]},\"property\":{\"type\":\"Identifier\",\"name\":\"align\",\"range\":[21,26]},\"computed\":false,\"range\":[7,26]},\"right\":{\"type\":\"StringLiteral\",\"value\":\"alignright\",\"range\":[31,43]},\"range\":[7,43]}],\"range\":[0,44]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\".\"},\"range\":[13,14]},{\"type\":{\"label\":\"name\"},\"value\":\"params\",\"range\":[14,20]},{\"type\":{\"label\":\".\"},\"range\":[20,21]},{\"type\":{\"label\":\"name\"},\"value\":\"align\",\"range\":[21,26]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[27,30]},{\"type\":{\"label\":\"string\"},\"value\":\"alignright\",\"range\":[31,43]},{\"type\":{\"label\":\")\"},\"range\":[43,44]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(_rec9._capt(actual, "arguments/0/left/object/object").params, "arguments/0/left/object").width, "arguments/0/left") === '300', "arguments/0"), {
        content: "assert(actual.params.width === '300')",
        filepath: "src/lib/shortcode.test.js",
        line: 56,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"property\":{\"type\":\"Identifier\",\"name\":\"params\",\"range\":[14,20]},\"computed\":false,\"range\":[7,20]},\"property\":{\"type\":\"Identifier\",\"name\":\"width\",\"range\":[21,26]},\"computed\":false,\"range\":[7,26]},\"right\":{\"type\":\"StringLiteral\",\"value\":\"300\",\"range\":[31,36]},\"range\":[7,36]}],\"range\":[0,37]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\".\"},\"range\":[13,14]},{\"type\":{\"label\":\"name\"},\"value\":\"params\",\"range\":[14,20]},{\"type\":{\"label\":\".\"},\"range\":[20,21]},{\"type\":{\"label\":\"name\"},\"value\":\"width\",\"range\":[21,26]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[27,30]},{\"type\":{\"label\":\"string\"},\"value\":\"300\",\"range\":[31,36]},{\"type\":{\"label\":\")\"},\"range\":[36,37]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      (0, _powerAssert.default)(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(_rec10._capt(actual, "arguments/0/left/object/object").params, "arguments/0/left/object").caption, "arguments/0/left") === 'Caption', "arguments/0"), {
        content: "assert(actual.params.caption === 'Caption')",
        filepath: "src/lib/shortcode.test.js",
        line: 57,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"property\":{\"type\":\"Identifier\",\"name\":\"params\",\"range\":[14,20]},\"computed\":false,\"range\":[7,20]},\"property\":{\"type\":\"Identifier\",\"name\":\"caption\",\"range\":[21,28]},\"computed\":false,\"range\":[7,28]},\"right\":{\"type\":\"StringLiteral\",\"value\":\"Caption\",\"range\":[33,42]},\"range\":[7,42]}],\"range\":[0,43]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\".\"},\"range\":[13,14]},{\"type\":{\"label\":\"name\"},\"value\":\"params\",\"range\":[14,20]},{\"type\":{\"label\":\".\"},\"range\":[20,21]},{\"type\":{\"label\":\"name\"},\"value\":\"caption\",\"range\":[21,28]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[29,32]},{\"type\":{\"label\":\"string\"},\"value\":\"Caption\",\"range\":[33,42]},{\"type\":{\"label\":\")\"},\"range\":[42,43]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
  /** @test {trimLineBreak} */

  describe('trimLineBreak', () => {
    const trimLineBreak = Module.__get__('trimLineBreak');

    it('trimLineBreak', () => {
      var _rec11 = new _powerAssertRecorder(),
          _rec12 = new _powerAssertRecorder();

      let actual = trimLineBreak('\nText\n');
      (0, _powerAssert.default)(_rec11._expr(_rec11._capt(_rec11._capt(actual, "arguments/0/left") === 'Text', "arguments/0"), {
        content: "assert(actual === 'Text')",
        filepath: "src/lib/shortcode.test.js",
        line: 67,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"StringLiteral\",\"value\":\"Text\",\"range\":[18,24]},\"range\":[7,24]}],\"range\":[0,25]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"string\"},\"value\":\"Text\",\"range\":[18,24]},{\"type\":{\"label\":\")\"},\"range\":[24,25]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
      actual = trimLineBreak('\n\nText\n');
      (0, _powerAssert.default)(_rec12._expr(_rec12._capt(_rec12._capt(actual, "arguments/0/left") === '\nText', "arguments/0"), {
        content: "assert(actual === '\\nText')",
        filepath: "src/lib/shortcode.test.js",
        line: 70,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"StringLiteral\",\"value\":\"\\nText\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"string\"},\"value\":\"\\nText\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
});