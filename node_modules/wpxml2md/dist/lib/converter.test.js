"use strict";

var _powerAssert = _interopRequireDefault(require("power-assert"));

var _converter = _interopRequireDefault(require("./converter.js"));

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @test {Converter} */
describe('Converter', () => {
  /** @test {Convert} */
  describe('convert: Markdown', () => {
    it('Plain text (TEXT_NODE), Keep a whitespace and line break', () => {
      var _rec = new _powerAssertRecorder();

      const post = 'Line 1\n\nLine 2  Word\nLine3';
      const expected = 'Line 1\n\nLine 2  Word\nLine3';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec._expr(_rec._capt(_rec._capt(actual, "arguments/0/left") === _rec._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 12,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<p>', () => {
      var _rec2 = new _powerAssertRecorder();

      const post = '<p>\nLine 1\n\nLine 2\n</p>';
      const expected = 'Line 1 Line 2';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec2._expr(_rec2._capt(_rec2._capt(actual, "arguments/0/left") === _rec2._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 19,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<br>', () => {
      var _rec3 = new _powerAssertRecorder();

      const post = 'Line 1<br>Line 2<br>Line 3';
      const expected = 'Line 1  \nLine 2  \nLine 3';
      const actual = (0, _converter.default)(post, {
        noGFM: true
      });
      (0, _powerAssert.default)(_rec3._expr(_rec3._capt(_rec3._capt(actual, "arguments/0/left") === _rec3._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 26,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<h1> - <h6>, and Markdown Extra Link', () => {
      var _rec4 = new _powerAssertRecorder();

      const post = `<h1>Title</h1>
  <h2 id="header-2">Header 2</h2>
    <h3>Header 3</h3>
      <h4>Header 4</h4>
        <h5>Header 5</h5>
          <h6>Header 6</h6>`;
      const expected = `# Title

## Header 2 {#header-2}

### Header 3

#### Header 4

##### Header 5

###### Header 6`;
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec4._expr(_rec4._capt(_rec4._capt(actual, "arguments/0/left") === _rec4._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 52,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<h1> no-melink', () => {
      var _rec5 = new _powerAssertRecorder();

      const post = '<h1 id="section1">Header</h1>';
      const expected = '# Header';
      const actual = (0, _converter.default)(post, {
        noMELink: true
      });
      (0, _powerAssert.default)(_rec5._expr(_rec5._capt(_rec5._capt(actual, "arguments/0/left") === _rec5._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 59,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<hr>', () => {
      var _rec6 = new _powerAssertRecorder();

      const post = '<hr>';
      const expected = '* * *';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec6._expr(_rec6._capt(_rec6._capt(actual, "arguments/0/left") === _rec6._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 66,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<em>, <i>', () => {
      var _rec7 = new _powerAssertRecorder();

      const post = '<em>Word 1</em> <i>Word 2</i>';
      const expected = '_Word 1_ _Word 2_';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec7._expr(_rec7._capt(_rec7._capt(actual, "arguments/0/left") === _rec7._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 73,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<code>', () => {
      var _rec8 = new _powerAssertRecorder();

      const post = 'Text <code>Code</code> Text';
      const expected = 'Text `Code` Text';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec8._expr(_rec8._capt(_rec8._capt(actual, "arguments/0/left") === _rec8._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 80,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<a>', () => {
      var _rec9 = new _powerAssertRecorder();

      const post = 'Text <a href="://example.com/" title="title">Link</a> Text <a href="#id">Inter Link</a>';
      const expected = 'Text [Link](://example.com/ "title") Text [Inter Link](#id)';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec9._expr(_rec9._capt(_rec9._capt(actual, "arguments/0/left") === _rec9._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 87,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<img>', () => {
      var _rec10 = new _powerAssertRecorder();

      const post = '<img src="example.png" alt="Title"> <img src="example.png" title="Example">';
      const expected = '![Title](example.png) ![](example.png "Example")';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec10._expr(_rec10._capt(_rec10._capt(actual, "arguments/0/left") === _rec10._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 94,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<pre><code>...</code></pre>', () => {
      var _rec11 = new _powerAssertRecorder();

      const post = `
Text

<pre><code>
const test = 'test';
</code></pre>

Text
`;
      const expected = 'Text\n\n    const test = \'test\';\n\nText';
      const actual = (0, _converter.default)(post, {
        noGFM: true
      });
      (0, _powerAssert.default)(_rec11._expr(_rec11._capt(_rec11._capt(actual, "arguments/0/left") === _rec11._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 111,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<blockquote>', () => {
      var _rec12 = new _powerAssertRecorder();

      const post = '<blockquote>\nLine 1\nLine 2\n</blockquote>';
      const expected = '> Line 1 Line 2';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec12._expr(_rec12._capt(_rec12._capt(actual, "arguments/0/left") === _rec12._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 118,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<ul><li>', () => {
      var _rec13 = new _powerAssertRecorder();

      const post = `<ul>
  <li>Item 1</li>
  <li>Item 2</li>
</ul>`;
      const expected = '* Item 1\n* Item 2';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec13._expr(_rec13._capt(_rec13._capt(actual, "arguments/0/left") === _rec13._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 129,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<ul><li>, nested', () => {
      var _rec14 = new _powerAssertRecorder();

      const post = `<ul>
  <li>Item 1
    <ul>
      <li>Item 1-1</li>
      <li>Item 1-2</li>
    </ul>
  </li>
  <li>Item 2</li>
</ul>`;
      const expected = '* Item 1\n    * Item 1-1\n    * Item 1-2\n* Item 2';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec14._expr(_rec14._capt(_rec14._capt(actual, "arguments/0/left") === _rec14._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 145,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<ol><li>', () => {
      var _rec15 = new _powerAssertRecorder();

      const post = `<ol>
  <li>Item 1</li>
  <li>Item 2</li>
</ol>`;
      const expected = '1. Item 1\n2. Item 2';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec15._expr(_rec15._capt(_rec15._capt(actual, "arguments/0/left") === _rec15._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 156,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<ol><li>, nested', () => {
      var _rec16 = new _powerAssertRecorder();

      const post = `<ol>
  <li>Item 1
    <ol>
      <li>Item 1-1</li>
      <li>Item 1-2</li>
    </ol>
  </li>
  <li>Item 2</li>
</ol>`;
      const expected = '1. Item 1\n    1. Item 1-1\n    2. Item 1-2\n2. Item 2';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec16._expr(_rec16._capt(_rec16._capt(actual, "arguments/0/left") === _rec16._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 172,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('Block Element', () => {
      var _rec17 = new _powerAssertRecorder();

      const post = '<address>Copyright 2009 - 2016 akabeko All Rights Reserved</address>';
      const expected = '<address>Copyright 2009 - 2016 akabeko All Rights Reserved</address>';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec17._expr(_rec17._capt(_rec17._capt(actual, "arguments/0/left") === _rec17._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 179,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('Otherwise', () => {
      var _rec18 = new _powerAssertRecorder();

      const post = '<example>Test</example>';
      const expected = '<example>Test</example>';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec18._expr(_rec18._capt(_rec18._capt(actual, "arguments/0/left") === _rec18._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 186,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
  /** @test {Convert} */

  describe('convert: GitHub Flavored Markdown', () => {
    it('<br>', () => {
      var _rec19 = new _powerAssertRecorder();

      const post = 'Line 1<br>Line 2<br>Line 3';
      const expected = 'Line 1\nLine 2\nLine 3';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec19._expr(_rec19._capt(_rec19._capt(actual, "arguments/0/left") === _rec19._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 196,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<del>, <s>, <strike>', () => {
      var _rec20 = new _powerAssertRecorder();

      const post = '<del>Text 1</del> <s>Text 2</s> <strike>Text 3</strike>';
      const expected = '~~Text 1~~ ~~Text 2~~ ~~Text 3~~';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec20._expr(_rec20._capt(_rec20._capt(actual, "arguments/0/left") === _rec20._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 203,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<ul><li><input type="checkbox">', () => {
      var _rec21 = new _powerAssertRecorder();

      const post = '<ul><li><input type="checkbox">Item 1</li><li><input type="checkbox" checked="true">Item 2</li></ul>';
      const expected = '* [ ] Item 1\n* [x] Item 2';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec21._expr(_rec21._capt(_rec21._capt(actual, "arguments/0/left") === _rec21._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 210,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<pre><code>...</code></pre>', () => {
      var _rec22 = new _powerAssertRecorder();

      const post = `
Text

<pre><code>
const test = 'test';
</code></pre>

Text
`;
      const expected = 'Text\n\n```\nconst test = \'test\';\n```\n\nText';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec22._expr(_rec22._capt(_rec22._capt(actual, "arguments/0/left") === _rec22._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 227,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<div class="highlight highlight-lang"><pre>...</pre></div>', () => {
      var _rec23 = new _powerAssertRecorder();

      const post = `
Text

<div class="highlight highlight-js"><pre>
const test = 'test';
</pre></div>

Text
`;
      const expected = 'Text\n\n```js\nconst test = \'test\';\n\n```\n\nText';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec23._expr(_rec23._capt(_rec23._capt(actual, "arguments/0/left") === _rec23._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 244,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<th>', () => {
      var _rec24 = new _powerAssertRecorder();

      const post = '<table><th>Header 1</th><th>Header 2</th></table>';
      const expected = '| Header 1 | Header 2 |';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec24._expr(_rec24._capt(_rec24._capt(actual, "arguments/0/left") === _rec24._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 251,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<td>', () => {
      var _rec25 = new _powerAssertRecorder();

      const post = '<table><td>Value 1</td><td>Value 2</td></table>';
      const expected = '| Value 1 | Value 2 |';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec25._expr(_rec25._capt(_rec25._capt(actual, "arguments/0/left") === _rec25._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 258,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<th>, <td>', () => {
      var _rec26 = new _powerAssertRecorder();

      const post = '<table><tr><th>Header 1</th><th>Header 2</th></tr><tr><td>Value 1</td><td>Value 2</td></tr></table>';
      const expected = '| Header 1 | Header 2 |\n| Value 1 | Value 2 |';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec26._expr(_rec26._capt(_rec26._capt(actual, "arguments/0/left") === _rec26._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 265,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
    it('<thead><th>, <tbody><td>', () => {
      var _rec27 = new _powerAssertRecorder();

      const post = `<table>
  <thead>
    <tr><th>Header 1</th><th>Header 2</th></tr>
</thead>
  <tbody>
    <tr><td>Value 1</td><td>Value 2</td></tr>
  </tbody>
</table>`;
      const expected = '| Header 1 | Header 2 |\n| --- | --- |\n| Value 1 | Value 2 |';
      const actual = (0, _converter.default)(post);
      (0, _powerAssert.default)(_rec27._expr(_rec27._capt(_rec27._capt(actual, "arguments/0/left") === _rec27._capt(expected, "arguments/0/right"), "arguments/0"), {
        content: "assert(actual === expected)",
        filepath: "src/lib/converter.test.js",
        line: 280,
        ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"assert\",\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"Identifier\",\"name\":\"actual\",\"range\":[7,13]},\"right\":{\"type\":\"Identifier\",\"name\":\"expected\",\"range\":[18,26]},\"range\":[7,26]}],\"range\":[0,27]}",
        tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"assert\",\"range\":[0,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"actual\",\"range\":[7,13]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[14,17]},{\"type\":{\"label\":\"name\"},\"value\":\"expected\",\"range\":[18,26]},{\"type\":{\"label\":\")\"},\"range\":[26,27]}]",
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  });
});